
project( "SpiralEngine" )
	
	language( "C++" )
	kind( "StaticLib" )
	
	-- use compiler name for folder /build/compiler
	location( "../Build/" .. _ACTION )
	
	files
	{
		"**.cpp",
		"**.hpp",

		"../ThirdParty/GLee/**.h",
		"../ThirdParty/GLee/**.c",
		
		"../ThirdParty/Zip/**.hpp",
		"../ThirdParty/Zip/**.cpp",
		
		"../ThirdParty/libpng/**.h",
		"../ThirdParty/libpng/**.c",
		
		--"../ThirdParty/tinyxml/**.cpp",
		--"../ThirdParty/tinyxml/**.h",
		
		--"../ThirdParty/Lua/**.h",
		--"../ThirdParty/Lua/**.c",
		
		"../ThirdParty/Math/**.hpp",
		
		"../ThirdParty/Zlib/**.h",
		"../ThirdParty/Zlib/**.c",
	}
	
	files
	{
		"../ThirdParty/OggVorbis/lib/analysis.c",
		"../ThirdParty/OggVorbis/lib/bitrate.c",
		"../ThirdParty/OggVorbis/lib/block.c",
		"../ThirdParty/OggVorbis/lib/codebook.c",
		"../ThirdParty/OggVorbis/lib/envelope.c",
		"../ThirdParty/OggVorbis/lib/floor0.c",
		"../ThirdParty/OggVorbis/lib/floor1.c",
		"../ThirdParty/OggVorbis/lib/framing.c",
		"../ThirdParty/OggVorbis/lib/info.c",
		"../ThirdParty/OggVorbis/lib/lookup.c",
		"../ThirdParty/OggVorbis/lib/lpc.c",
		"../ThirdParty/OggVorbis/lib/lsp.c",
		"../ThirdParty/OggVorbis/lib/mapping0.c",
		"../ThirdParty/OggVorbis/lib/mdct.c",
		"../ThirdParty/OggVorbis/lib/psy.c",
		"../ThirdParty/OggVorbis/lib/registry.c",
		"../ThirdParty/OggVorbis/lib/res0.c",
		"../ThirdParty/OggVorbis/lib/sharedbook.c",
		"../ThirdParty/OggVorbis/lib/smallft.c",
		"../ThirdParty/OggVorbis/lib/synthesis.c",
		"../ThirdParty/OggVorbis/lib/vorbisenc.c",
		"../ThirdParty/OggVorbis/lib/vorbisfile.c",
		"../ThirdParty/OggVorbis/lib/window.c",
		"../ThirdParty/OggVorbis/lib/bitwise.c"	
	}
	
	-- freeType specifics
	defines
	{
		"FT2_BUILD_LIBRARY"
	}
	
	files
	{
		"../ThirdParty/FreeType/src/base/ftsystem.c",
		"../ThirdParty/FreeType/src/base/ftinit.c",
		"../ThirdParty/FreeType/src/base/ftdebug.c", 
		"../ThirdParty/FreeType/src/base/ftbase.c",
		"../ThirdParty/FreeType/src/base/ftbbox.c",
		"../ThirdParty/FreeType/src/base/ftglyph.c", 
		"../ThirdParty/FreeType/src/base/ftbitmap.c",
		"../ThirdParty/FreeType/src/sfnt/sfnt.c",
		"../ThirdParty/FreeType/src/psnames/psnames.c",
		"../ThirdParty/FreeType/src/psaux/psaux.c",
		"../ThirdParty/FreeType/src/pshinter/pshinter.c",
		
		-- drivers
		"../ThirdParty/FreeType/src/truetype/truetype.c",
		"../ThirdParty/FreeType/src/type1/type1.c",
		"../ThirdParty/FreeType/src/type42/type42.c",
		
		-- renderers
		"../ThirdParty/FreeType/src/raster/raster.c",
		"../ThirdParty/FreeType/src/smooth/smooth.c",
		
		"../ThirdParty/FreeType/src/autofit/autofit.c", 
		"../ThirdParty/FreeType/src/cache/ftcache.c",
	}
	
	-- include dirs
	includedirs 
	{
		"../ThirdParty/zlib",
		"../ThirdParty/FreeType/include",
		"../ThirdParty/OggVorbis/include"
	}
	
	-- exclude these files
	excludes
	{
		"../ThirdParty/Math/Eigen/**.cpp"
	}
	
	-- add window defines 
	if os.get() == "windows"
	then
		defines
		{
			"WIN32",
			"_WINDOWS",
			"NOMINMAX" -- prevent windows.h from defining them
		}
		-- link with opengl
		-- link with AL
		links
		{
			"Opengl32",
			"OpenAL32"
		}
	end
	
	-- add disabling of depricated warnings
	if _ACTION == "vs2005" or _ACTION == "vs2008"
	then
		defines
		{
			"_CRT_SECURE_NO_WARNINGS"
		}
	end
	
	--------------------------------
	-- Debug config
	--------------------------------
	configuration( "Debug" .. _ACTION )
	
		targetdir( "../Build/bin/Debug" .. _ACTION )
		-- set the binary output name
		targetname( "Spiral_debug" .. _ACTION )
		-- set the directory were built objs go
		objdir( "../Obj/" .. _ACTION .. "/debug" )
		
		defines
		{
			"_DEBUG"
		}
		
		flags
		{
			"No64BitChecks",
			"NoManifest",
			"NoPCH",
			"NoRTTI",
			"StaticRuntime",
			"Symbols"
		}
	configuration ({})
	
	--------------------------------
	-- Release config
	--------------------------------
	configuration( "Release" .. _ACTION )
	
		targetdir( "../Build/bin/Release" .. _ACTION )
		-- set the binary output name
		targetname( "Spiral_Release" .. _ACTION )
		-- set the directory were built objs go
		objdir( "../Obj/" .. _ACTION .. "/release" )
		
		
		defines
		{
			"NDEBUG"
		}
		
		flags
		{
			"No64BitChecks",
			"NoManifest",
			"NoPCH",
			"NoRTTI",
			"StaticRuntime",
			"OptimizeSpeed",
			"NoEditAndContinue"
		}
	configuration ({})
	
	